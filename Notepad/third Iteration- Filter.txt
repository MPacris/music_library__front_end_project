third Iteration- Filter

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import MusicTable from './MusicTable/MusicTable';
import SearchBar from './SearchBar/SearchBar';
import Filter from './Filter/Filter';

function App() {
  const [songs, setSongs] = useState([]);
  const [filteredSongs, setFilteredSongs] = useState([]);

  useEffect(() => {
    fetchData();
  }, []);

  async function fetchData() {
    try {
      const response = await axios.get('http://127.0.0.1:5000/api/songs');
      setSongs(response.data.songs);
      setFilteredSongs(response.data.songs);
    } catch (ex) {
      console.log('Error in fetchData API call!');
    }
  }

  function handleSearch(term) {
    const filtered = songs.filter((song) => {
      const searchTerm = term.toLowerCase();
      return (
        song.title.toLowerCase().includes(searchTerm) ||
        song.album.toLowerCase().includes(searchTerm) ||
        song.artist.toLowerCase().includes(searchTerm) ||
        song.genre.toLowerCase().includes(searchTerm) ||
        song.release_date.toLowerCase().includes(searchTerm)
      );
    });
    setFilteredSongs(filtered);
  }

  function handleFilter(filterType, filterValue) {
    const filtered = songs.filter((song) => {
      const lowerCaseFilterValue = filterValue.toLowerCase();
      switch (filterType) {
        case 'album':
          return song.album.toLowerCase().includes(lowerCaseFilterValue);
        case 'artist':
          return song.artist.toLowerCase().includes(lowerCaseFilterValue);
        case 'genre':
          return song.genre.toLowerCase().includes(lowerCaseFilterValue);
        case 'releaseDate':
          return song.release_date.toLowerCase().includes(lowerCaseFilterValue);
        case 'title':
          return song.title.toLowerCase().includes(lowerCaseFilterValue);
        default:
          return true;
      }
    });
    setFilteredSongs(filtered);
  }

  return (
    <div>
      <h3>Music Library</h3>
      <SearchBar onSearch={handleSearch} />
      <Filter onFilter={handleFilter} />
      <MusicTable songs={filteredSongs} />
    </div>
  );
}

export default App;


import React, { useState } from 'react';

function Filter({ onFilter }) {
  const [filterType, setFilterType] = useState('');
  const [filterValue, setFilterValue] = useState('');

  function handleSubmit(event) {
    event.preventDefault();
    onFilter(filterType, filterValue);
  }

  return (
    <form onSubmit={handleSubmit}>
      <select value={filterType} onChange={(event) => setFilterType(event.target.value)}>
        <option value="">Select Filter Type</option>
        <option value="album">Album</option>
        <option value="artist">Artist</option>
        <option value="genre">Genre</option>
        <option value="releaseDate">Release Date</option>
        <option value="title">Title</option>
      </select>
      <input
        type="text"
        placeholder="Filter Value"
        value={filterValue}
        onChange={(event) => setFilterValue(event.target.value)}
        required
      />
      <button type="submit">Apply Filter</button>
    </form>
  );
}

export default Filter;

import React, { useState } from 'react';

function SearchBar({ onSearch }) {
  const [term, setTerm] = useState('');

  function handleSubmit(event) {
    event.preventDefault();
    onSearch(term);
  }

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        placeholder="Search..."
        value={term}
        onChange={(event) => setTerm(event.target.value)}
      />
      <button type="submit">Search</button>
    </form>
  );
}

export default SearchBar;

import React from 'react';

function MusicTable({ songs }) {
  return (
    <table>
      <thead>
        <tr>
          <th>Title</th>
          <th>Album</th>
          <th>Artist</th>
          <th>Genre</th>
          <th>Release Date</th>
          <th>Running Time</th>
        </tr>
      </thead>
      <tbody>
        {songs.map((song) => (
          <tr key={song.id}>
            <td>{song.title}</td>
            <td>{song.album}</td>
            <td>{song.artist}</td>
            <td>{song.genre}</td>
            <td>{song.release_date}</td>
            <td>{song.running_time}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}

export default MusicTable;
